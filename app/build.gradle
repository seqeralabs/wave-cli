plugins {
    id 'groovy'
    id 'io.seqera.wave.cli.java-application-conventions'
    id 'org.graalvm.buildtools.native' version '0.9.28'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

compileJava {
    options.release.set(11)
}

repositories {
    maven { url = "https://s3-eu-west-1.amazonaws.com/maven.seqera.io/releases" }
    maven { url = "https://s3-eu-west-1.amazonaws.com/maven.seqera.io/snapshots" }
}

dependencies {
    implementation 'io.seqera:wave-api:0.7.1'
    implementation 'io.seqera:wave-utils:0.9.0'
    implementation 'info.picocli:picocli:4.6.1'
    implementation 'com.squareup.moshi:moshi:1.15.0'
    implementation 'com.squareup.moshi:moshi-adapters:1.14.0'
    implementation 'dev.failsafe:failsafe:3.1.0'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'org.yaml:snakeyaml:2.1'
    annotationProcessor 'info.picocli:picocli-codegen:4.6.1'

    testImplementation "org.codehaus.groovy:groovy:3.0.15"
    testImplementation "org.codehaus.groovy:groovy-nio:3.0.15"
    testImplementation ("org.codehaus.groovy:groovy-test:3.0.17")
    testImplementation ("cglib:cglib-nodep:3.3.0")
    testImplementation ("org.objenesis:objenesis:3.2")
    testImplementation ("org.spockframework:spock-core:2.3-groovy-3.0") { exclude group: 'org.codehaus.groovy'; exclude group: 'net.bytebuddy' }
    testImplementation ('org.spockframework:spock-junit4:2.3-groovy-3.0') { exclude group: 'org.codehaus.groovy'; exclude group: 'net.bytebuddy' }
    testImplementation 'com.github.tomakehurst:wiremock:2.27.2'
}

test {
    useJUnitPlatform()
}

// read the version from the `VERSION` file
version = new File(rootDir,'VERSION').text.trim()
group = 'io.seqera'

application {
    // Define the main class for the application.
    mainClass = 'io.seqera.wave.cli.App'
    //  Run the Graalvm agent to resolve dynamic proxies configuration
    applicationDefaultJvmArgs = ["-agentlib:native-image-agent=config-merge-dir=conf/"]
}

shadowJar {
    archiveBaseName.set('wave')
    archiveClassifier.set('')
    archiveVersion.set('')
}

run {
    if( environment['JVM_OPTS'] ) {
        jvmArgs(environment['JVM_OPTS'])
    }
}

graalvmNative {
    binaries {
        main {
            imageName = 'wave'
            mainClass = 'io.seqera.wave.cli.App'
            configurationFileDirectories.from(file('conf'))

            if (System.env.getOrDefault("PLATFORM", "") == "linux-x86_64") {
                buildArgs(['--static', '--libc=musl', '--gc=G1'])
            }

            javaLauncher = javaToolchains.launcherFor {
                languageVersion = JavaLanguageVersion.of(21)
            }
            buildArgs.add('--enable-url-protocols=https')
            buildArgs.add('-R:MaxHeapSize=100M')
            buildArgs.add('-R:MinHeapSize=10M')
            buildArgs.add('-R:MaxNewSize=25M')
        }
    }
    toolchainDetection = true
    testSupport = false
}

task buildInfo {
    doLast {
        def version = rootProject.file('VERSION').text.trim()
        def commitId = System.env.getOrDefault("GITHUB_SHA", "unknown").substring(0,7)
        def info = """\
                    name=${rootProject.name}
                    version=${version}
                    commitId=${commitId}
                """.stripIndent().toString()
        def f = file("src/main/resources/META-INF/build-info.properties")
        f.parentFile.mkdirs()
        f.text = info
    }
}

compileJava {
    dependsOn buildInfo
}
